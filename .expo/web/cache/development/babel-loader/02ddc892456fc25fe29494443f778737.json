{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport IconButton from \"../components/UI/IconButton\";\nimport List from \"../components/EventDetail/List\";\nimport Subtitle from \"../components/EventDetail/Subtitle\";\nimport EventDetails from \"../components/EventDetails\";\nimport { EVENTS } from \"../data/dummy-data\";\nimport { addFavorite, removeFavorite } from \"../store/redux/favorites\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchEventData } from \"../util/eventsApi.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction EventDetailScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetchedEvents = _useState2[0],\n      setFetchedEvents = _useState2[1];\n\n  useEffect(function () {\n    function getEvents() {\n      var events;\n      return _regeneratorRuntime.async(function getEvents$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchEventData(\"EVENTS\"));\n\n            case 2:\n              events = _context.sent;\n              setFetchedEvents(events);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getEvents();\n  }, []);\n  var favoriteEventIds = useSelector(function (state) {\n    return state.favoriteEvents.ids;\n  });\n  var dispatch = useDispatch();\n  var eventId = route.params.eventId;\n  console.log(\"fetchedEvents \", fetchedEvents);\n  console.log(\"eventId\", eventId);\n  var selectedEvent = fetchedEvents.find(function (event) {\n    return event.id === eventId;\n  });\n  var eventIsFavorite = favoriteEventIds.includes(eventId);\n\n  function changeFavoriteStatusHandler() {\n    if (eventIsFavorite) {\n      dispatch(removeFavorite({\n        id: eventId\n      }));\n    } else {\n      dispatch(addFavorite({\n        id: eventId\n      }));\n    }\n  }\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return _jsx(IconButton, {\n          size: 24,\n          icon: eventIsFavorite ? \"star\" : \"star-outline\",\n          color: \"#4967AA\",\n          onPress: changeFavoriteStatusHandler\n        });\n      }\n    });\n  }, [navigation, changeFavoriteStatusHandler]);\n  return _jsxs(ScrollView, {\n    style: styles.rootContainer,\n    children: [_jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: selectedEvent.imageUrl\n      }\n    }), _jsx(Text, {\n      style: styles.title,\n      children: selectedEvent.title\n    }), _jsx(EventDetails, {\n      duration: selectedEvent.duration,\n      complexity: selectedEvent.complexity,\n      date: selectedEvent.date,\n      textStyle: styles.detailText\n    }), _jsx(View, {\n      style: styles.listOuterContainer,\n      children: _jsxs(View, {\n        style: styles.listContainer,\n        children: [_jsx(Subtitle, {\n          children: \"Event information\"\n        }), _jsx(List, {\n          data: selectedEvent.information\n        }), _jsx(Subtitle, {\n          children: \"Event details\"\n        }), _jsx(List, {\n          data: selectedEvent.details\n        })]\n      })\n    })]\n  });\n}\n\nexport default EventDetailScreen;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    marginBottom: 32\n  },\n  image: {\n    width: \"100%\",\n    height: 350\n  },\n  title: {\n    fontWeight: \"bold\",\n    fontSize: 20,\n    margin: 8,\n    textAlign: \"center\"\n  },\n  detailText: {\n    color: \"black\"\n  },\n  listOuterContainer: {\n    alignItems: \"center\"\n  },\n  listContainer: {\n    width: \"80%\"\n  }\n});","map":{"version":3,"names":["useEffect","useLayoutEffect","useState","IconButton","List","Subtitle","EventDetails","EVENTS","addFavorite","removeFavorite","useDispatch","useSelector","fetchEventData","EventDetailScreen","route","navigation","fetchedEvents","setFetchedEvents","getEvents","events","favoriteEventIds","state","favoriteEvents","ids","dispatch","eventId","params","console","log","selectedEvent","find","event","id","eventIsFavorite","includes","changeFavoriteStatusHandler","setOptions","headerRight","styles","rootContainer","image","uri","imageUrl","title","duration","complexity","date","detailText","listOuterContainer","listContainer","information","details","StyleSheet","create","marginBottom","width","height","fontWeight","fontSize","margin","textAlign","color","alignItems"],"sources":["C:/Users/snorr/Dropbox/4semester/ReactNative/React-Native-CBS-Mobil-App2/screens/EventDetailScreen.js"],"sourcesContent":["import { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { Text, Image, View, StyleSheet, ScrollView, Button } from \"react-native\";\r\n\r\nimport IconButton from \"../components/UI/IconButton\";\r\nimport List from \"../components/EventDetail/List\";\r\nimport Subtitle from \"../components/EventDetail/Subtitle\";\r\nimport EventDetails from \"../components/EventDetails\";\r\nimport { EVENTS } from \"../data/dummy-data\";\r\nimport { addFavorite, removeFavorite } from \"../store/redux/favorites\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchEventData } from \"../util/eventsApi.js\";\r\n\r\nfunction EventDetailScreen({ route, navigation }) {\r\n\r\n   const [fetchedEvents, setFetchedEvents] = useState([]);\r\n\r\n   useEffect(() => {\r\n    async function getEvents() {\r\n      const events = await fetchEventData(\"EVENTS\");\r\n      setFetchedEvents(events);\r\n\r\n      // const addEventsToStore = useSelector((state) => state.loadEvents.events)\r\n      // dispatch(addEvents({ events }));\r\n      // console.log(events);\r\n    }\r\n    getEvents();\r\n  }, []);\r\n\r\n\r\n  // special redux hook to retrive information from redux store (useSelector)\r\n  const favoriteEventIds = useSelector((state) => state.favoriteEvents.ids);\r\n  const dispatch = useDispatch();\r\n\r\n  const eventId = route.params.eventId;\r\n  console.log(\"fetchedEvents \", fetchedEvents);\r\n  console.log(\"eventId\" , eventId);\r\n  const selectedEvent = fetchedEvents.find((event) => event.id === eventId);\r\n  // console.log(selectedEvent.imageUrl);\r\n\r\n  //console.log(\"selectedEvent\", selectedEvent);\r\n  //console.log(\"imageUrl\", selectedEvent.imageUrl);\r\n\r\n  // Check if favoriteEventIds array includes this id\r\n  const eventIsFavorite = favoriteEventIds.includes(eventId);\r\n\r\n  function changeFavoriteStatusHandler() {\r\n    if (eventIsFavorite) {\r\n      dispatch(removeFavorite({ id: eventId }));\r\n    } else {\r\n      dispatch(addFavorite({ id: eventId }));\r\n    }\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    navigation.setOptions({\r\n      headerRight: () => {\r\n        return (\r\n          <IconButton\r\n            size={24}\r\n            icon={eventIsFavorite ? \"star\" : \"star-outline\"}\r\n            color=\"#4967AA\"\r\n            onPress={changeFavoriteStatusHandler}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  }, [navigation, changeFavoriteStatusHandler]);\r\n\r\n  return (\r\n    <ScrollView style={styles.rootContainer}>\r\n      {/* <Button title=\"Learn More\" onPress={getFromDB}>somebutton</Button> */}\r\n      <Image style={styles.image} source={{ uri: selectedEvent.imageUrl }} />\r\n      <Text style={styles.title}>{selectedEvent.title}</Text>\r\n      <EventDetails\r\n        duration={selectedEvent.duration}\r\n        complexity={selectedEvent.complexity}\r\n        date={selectedEvent.date}\r\n        textStyle={styles.detailText}\r\n      />\r\n\r\n      <View style={styles.listOuterContainer}>\r\n        <View style={styles.listContainer}>\r\n          <Subtitle>Event information</Subtitle>\r\n          <List data={selectedEvent.information} />\r\n          <Subtitle>Event details</Subtitle>\r\n          <List data={selectedEvent.details} />\r\n        </View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nexport default EventDetailScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  rootContainer: {\r\n    marginBottom: 32,\r\n  },\r\n  image: {\r\n    width: \"100%\",\r\n    height: 350,\r\n  },\r\n  title: {\r\n    fontWeight: \"bold\",\r\n    fontSize: 20,\r\n    margin: 8,\r\n    textAlign: \"center\",\r\n  },\r\n  detailText: {\r\n    color: \"black\",\r\n  },\r\n  listOuterContainer: {\r\n    alignItems: \"center\",\r\n  },\r\n  listContainer: {\r\n    width: \"80%\",\r\n  },\r\n});\r\n\r\n\r\n  // const [fetchedEvents, setFetchedEvents] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   async function getEvents() {\r\n  //     const events = await fetchEventData(\"EVENTS\");\r\n  //     //console.log(\"events\", events);\r\n  //     setFetchedEvents(events);\r\n  //   }\r\n  //   getEvents();\r\n  // }, []);\r\n\r\n  // function getFromDB() {\r\n  //   console.log(\"fetchedEvents\", fetchedEvents);\r\n  // }"],"mappings":"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"},"metadata":{},"sourceType":"module"}